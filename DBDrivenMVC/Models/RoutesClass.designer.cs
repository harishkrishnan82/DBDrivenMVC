#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBDrivenMVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MVCRoutes")]
	public partial class RoutesClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMVCRoute(MVCRoute instance);
    partial void UpdateMVCRoute(MVCRoute instance);
    partial void DeleteMVCRoute(MVCRoute instance);
    partial void InsertMVCroutesParam(MVCroutesParam instance);
    partial void UpdateMVCroutesParam(MVCroutesParam instance);
    partial void DeleteMVCroutesParam(MVCroutesParam instance);
    #endregion
		
		public RoutesClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MVCRoutesConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RoutesClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoutesClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoutesClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RoutesClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MVCRoute> MVCRoutes
		{
			get
			{
				return this.GetTable<MVCRoute>();
			}
		}
		
		public System.Data.Linq.Table<MVCroutesParam> MVCroutesParams
		{
			get
			{
				return this.GetTable<MVCroutesParam>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCRoutes")]
	public partial class MVCRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _routeId;
		
		private string _routeName;
		
		private string _routePattern;
		
		private int _routeOrder;
		
		private bool _isActive;
		
		private EntitySet<MVCroutesParam> _MVCroutesParams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrouteIdChanging(int value);
    partial void OnrouteIdChanged();
    partial void OnrouteNameChanging(string value);
    partial void OnrouteNameChanged();
    partial void OnroutePatternChanging(string value);
    partial void OnroutePatternChanged();
    partial void OnrouteOrderChanging(int value);
    partial void OnrouteOrderChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public MVCRoute()
		{
			this._MVCroutesParams = new EntitySet<MVCroutesParam>(new Action<MVCroutesParam>(this.attach_MVCroutesParams), new Action<MVCroutesParam>(this.detach_MVCroutesParams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int routeId
		{
			get
			{
				return this._routeId;
			}
			set
			{
				if ((this._routeId != value))
				{
					this.OnrouteIdChanging(value);
					this.SendPropertyChanging();
					this._routeId = value;
					this.SendPropertyChanged("routeId");
					this.OnrouteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string routeName
		{
			get
			{
				return this._routeName;
			}
			set
			{
				if ((this._routeName != value))
				{
					this.OnrouteNameChanging(value);
					this.SendPropertyChanging();
					this._routeName = value;
					this.SendPropertyChanged("routeName");
					this.OnrouteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routePattern", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string routePattern
		{
			get
			{
				return this._routePattern;
			}
			set
			{
				if ((this._routePattern != value))
				{
					this.OnroutePatternChanging(value);
					this.SendPropertyChanging();
					this._routePattern = value;
					this.SendPropertyChanged("routePattern");
					this.OnroutePatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routeOrder", DbType="Int NOT NULL")]
		public int routeOrder
		{
			get
			{
				return this._routeOrder;
			}
			set
			{
				if ((this._routeOrder != value))
				{
					this.OnrouteOrderChanging(value);
					this.SendPropertyChanging();
					this._routeOrder = value;
					this.SendPropertyChanged("routeOrder");
					this.OnrouteOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="BIT NOTNULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCRoute_MVCroutesParam", Storage="_MVCroutesParams", ThisKey="routeId", OtherKey="routeID")]
		public EntitySet<MVCroutesParam> MVCroutesParams
		{
			get
			{
				return this._MVCroutesParams;
			}
			set
			{
				this._MVCroutesParams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MVCroutesParams(MVCroutesParam entity)
		{
			this.SendPropertyChanging();
			entity.MVCRoute = this;
		}
		
		private void detach_MVCroutesParams(MVCroutesParam entity)
		{
			this.SendPropertyChanging();
			entity.MVCRoute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCroutesParam")]
	public partial class MVCroutesParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _paramId;
		
		private int _routeID;
		
		private string _paramKey;
		
		private string _paramContraint;
		
		private string _paramValue;
		
		private EntityRef<MVCRoute> _MVCRoute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnparamIdChanging(int value);
    partial void OnparamIdChanged();
    partial void OnrouteIDChanging(int value);
    partial void OnrouteIDChanged();
    partial void OnparamKeyChanging(string value);
    partial void OnparamKeyChanged();
    partial void OnparamContraintChanging(string value);
    partial void OnparamContraintChanged();
    partial void OnparamValueChanging(string value);
    partial void OnparamValueChanged();
    #endregion
		
		public MVCroutesParam()
		{
			this._MVCRoute = default(EntityRef<MVCRoute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paramId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int paramId
		{
			get
			{
				return this._paramId;
			}
			set
			{
				if ((this._paramId != value))
				{
					this.OnparamIdChanging(value);
					this.SendPropertyChanging();
					this._paramId = value;
					this.SendPropertyChanged("paramId");
					this.OnparamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routeID", DbType="Int NOT NULL")]
		public int routeID
		{
			get
			{
				return this._routeID;
			}
			set
			{
				if ((this._routeID != value))
				{
					if (this._MVCRoute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrouteIDChanging(value);
					this.SendPropertyChanging();
					this._routeID = value;
					this.SendPropertyChanged("routeID");
					this.OnrouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paramKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string paramKey
		{
			get
			{
				return this._paramKey;
			}
			set
			{
				if ((this._paramKey != value))
				{
					this.OnparamKeyChanging(value);
					this.SendPropertyChanging();
					this._paramKey = value;
					this.SendPropertyChanged("paramKey");
					this.OnparamKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paramContraint", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string paramContraint
		{
			get
			{
				return this._paramContraint;
			}
			set
			{
				if ((this._paramContraint != value))
				{
					this.OnparamContraintChanging(value);
					this.SendPropertyChanging();
					this._paramContraint = value;
					this.SendPropertyChanged("paramContraint");
					this.OnparamContraintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paramValue", DbType="VarChar(250)")]
		public string paramValue
		{
			get
			{
				return this._paramValue;
			}
			set
			{
				if ((this._paramValue != value))
				{
					this.OnparamValueChanging(value);
					this.SendPropertyChanging();
					this._paramValue = value;
					this.SendPropertyChanged("paramValue");
					this.OnparamValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCRoute_MVCroutesParam", Storage="_MVCRoute", ThisKey="routeID", OtherKey="routeId", IsForeignKey=true)]
		public MVCRoute MVCRoute
		{
			get
			{
				return this._MVCRoute.Entity;
			}
			set
			{
				MVCRoute previousValue = this._MVCRoute.Entity;
				if (((previousValue != value) 
							|| (this._MVCRoute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MVCRoute.Entity = null;
						previousValue.MVCroutesParams.Remove(this);
					}
					this._MVCRoute.Entity = value;
					if ((value != null))
					{
						value.MVCroutesParams.Add(this);
						this._routeID = value.routeId;
					}
					else
					{
						this._routeID = default(int);
					}
					this.SendPropertyChanged("MVCRoute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
