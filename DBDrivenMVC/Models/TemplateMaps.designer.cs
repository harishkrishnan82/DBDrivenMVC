#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBDrivenMVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MVCRoutes")]
	public partial class TemplateMapsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTempMapping(TempMapping instance);
    partial void UpdateTempMapping(TempMapping instance);
    partial void DeleteTempMapping(TempMapping instance);
    partial void InsertTemplateInfo(TemplateInfo instance);
    partial void UpdateTemplateInfo(TemplateInfo instance);
    partial void DeleteTemplateInfo(TemplateInfo instance);
    partial void InsertRouteInfo(RouteInfo instance);
    partial void UpdateRouteInfo(RouteInfo instance);
    partial void DeleteRouteInfo(RouteInfo instance);
    #endregion
		
		public TemplateMapsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MVCRoutesConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TemplateMapsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TemplateMapsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TemplateMapsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TemplateMapsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TempMapping> TempMappings
		{
			get
			{
				return this.GetTable<TempMapping>();
			}
		}
		
		public System.Data.Linq.Table<TemplateInfo> TemplateInfos
		{
			get
			{
				return this.GetTable<TemplateInfo>();
			}
		}
		
		public System.Data.Linq.Table<RouteInfo> RouteInfos
		{
			get
			{
				return this.GetTable<RouteInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TempMapping")]
	public partial class TempMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _TempID;
		
		private string _Key;
		
		private string _Value;
		
		private int _RouteID;
		
		private EntitySet<TemplateInfo> _TemplateInfos;
		
		private EntitySet<RouteInfo> _RouteInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTempIDChanging(int value);
    partial void OnTempIDChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    #endregion
		
		public TempMapping()
		{
			this._TemplateInfos = new EntitySet<TemplateInfo>(new Action<TemplateInfo>(this.attach_TemplateInfos), new Action<TemplateInfo>(this.detach_TemplateInfos));
			this._RouteInfos = new EntitySet<RouteInfo>(new Action<RouteInfo>(this.attach_RouteInfos), new Action<RouteInfo>(this.detach_RouteInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempID", DbType="Int NOT NULL")]
		public int TempID
		{
			get
			{
				return this._TempID;
			}
			set
			{
				if ((this._TempID != value))
				{
					this.OnTempIDChanging(value);
					this.SendPropertyChanging();
					this._TempID = value;
					this.SendPropertyChanged("TempID");
					this.OnTempIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL")]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TempMapping_TemplateInfo", Storage="_TemplateInfos", ThisKey="TempID", OtherKey="TempID")]
		public EntitySet<TemplateInfo> TemplateInfos
		{
			get
			{
				return this._TemplateInfos;
			}
			set
			{
				this._TemplateInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TempMapping_RouteInfo", Storage="_RouteInfos", ThisKey="RouteID", OtherKey="RouteID")]
		public EntitySet<RouteInfo> RouteInfos
		{
			get
			{
				return this._RouteInfos;
			}
			set
			{
				this._RouteInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemplateInfos(TemplateInfo entity)
		{
			this.SendPropertyChanging();
			entity.TempMapping = this;
		}
		
		private void detach_TemplateInfos(TemplateInfo entity)
		{
			this.SendPropertyChanging();
			entity.TempMapping = null;
		}
		
		private void attach_RouteInfos(RouteInfo entity)
		{
			this.SendPropertyChanging();
			entity.TempMapping = this;
		}
		
		private void detach_RouteInfos(RouteInfo entity)
		{
			this.SendPropertyChanging();
			entity.TempMapping = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateInfo")]
	public partial class TemplateInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TempID;
		
		private string _TempName;
		
		private string _TempPath;
		
		private EntityRef<TempMapping> _TempMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTempIDChanging(int value);
    partial void OnTempIDChanged();
    partial void OnTempNameChanging(string value);
    partial void OnTempNameChanged();
    partial void OnTempPathChanging(string value);
    partial void OnTempPathChanged();
    #endregion
		
		public TemplateInfo()
		{
			this._TempMapping = default(EntityRef<TempMapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TempID
		{
			get
			{
				return this._TempID;
			}
			set
			{
				if ((this._TempID != value))
				{
					if (this._TempMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTempIDChanging(value);
					this.SendPropertyChanging();
					this._TempID = value;
					this.SendPropertyChanged("TempID");
					this.OnTempIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TempName
		{
			get
			{
				return this._TempName;
			}
			set
			{
				if ((this._TempName != value))
				{
					this.OnTempNameChanging(value);
					this.SendPropertyChanging();
					this._TempName = value;
					this.SendPropertyChanged("TempName");
					this.OnTempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempPath", DbType="VarChar(200)")]
		public string TempPath
		{
			get
			{
				return this._TempPath;
			}
			set
			{
				if ((this._TempPath != value))
				{
					this.OnTempPathChanging(value);
					this.SendPropertyChanging();
					this._TempPath = value;
					this.SendPropertyChanged("TempPath");
					this.OnTempPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TempMapping_TemplateInfo", Storage="_TempMapping", ThisKey="TempID", OtherKey="TempID", IsForeignKey=true)]
		public TempMapping TempMapping
		{
			get
			{
				return this._TempMapping.Entity;
			}
			set
			{
				TempMapping previousValue = this._TempMapping.Entity;
				if (((previousValue != value) 
							|| (this._TempMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TempMapping.Entity = null;
						previousValue.TemplateInfos.Remove(this);
					}
					this._TempMapping.Entity = value;
					if ((value != null))
					{
						value.TemplateInfos.Add(this);
						this._TempID = value.TempID;
					}
					else
					{
						this._TempID = default(int);
					}
					this.SendPropertyChanged("TempMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RouteInfo")]
	public partial class RouteInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteID;
		
		private string _RouteName;
		
		private EntityRef<TempMapping> _TempMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnRouteNameChanging(string value);
    partial void OnRouteNameChanged();
    #endregion
		
		public RouteInfo()
		{
			this._TempMapping = default(EntityRef<TempMapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._TempMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RouteName
		{
			get
			{
				return this._RouteName;
			}
			set
			{
				if ((this._RouteName != value))
				{
					this.OnRouteNameChanging(value);
					this.SendPropertyChanging();
					this._RouteName = value;
					this.SendPropertyChanged("RouteName");
					this.OnRouteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TempMapping_RouteInfo", Storage="_TempMapping", ThisKey="RouteID", OtherKey="RouteID", IsForeignKey=true)]
		public TempMapping TempMapping
		{
			get
			{
				return this._TempMapping.Entity;
			}
			set
			{
				TempMapping previousValue = this._TempMapping.Entity;
				if (((previousValue != value) 
							|| (this._TempMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TempMapping.Entity = null;
						previousValue.RouteInfos.Remove(this);
					}
					this._TempMapping.Entity = value;
					if ((value != null))
					{
						value.RouteInfos.Add(this);
						this._RouteID = value.RouteID;
					}
					else
					{
						this._RouteID = default(int);
					}
					this.SendPropertyChanged("TempMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
